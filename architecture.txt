ARCHITECTURE OF THIS PROJECT: (simply because I'm getting way too overwhelmed with the size and complexity of this project)

Projects and their purposes:
1. PFDB_SS:
	This C# project captures screenshots of weapon statistics and names them into computer-friendly names. For example, AK12 becomes 0_0.png, AN94 becomes 0_1.png, etc.
2. Py_Exec + ImageParserForAPI
	This C# project is a wrapper for the Python script, which uses PyTesseract to search for text. This may need to be edited for different Phantom Forces versions, but oh well.
	This takes in the images from PFDB_SS and returns text for each image. (note that this project is the biggest bottleneck for the entire workflow up to this point)
3. FileParse:
	This C# project uses a slightly sophisticated algorithm to find the statistics. Note that this may not catch everything, but it will catch about 80% of the errors from 
	PyTesseract.
4. StatisticProofread
	This C# project throws all the data into regular expressions to extract only the important data. 
	(Future plans: Raise a flag whenever an error is found, and store those flags within a logfile)
5. P_Invoke + Calculator
	This C# wrapper project manages the context boundary between the managed C# code and unmanaged C/C++ code. 
	(Need to do: Figure out roles for C++ vs C#)
...

Ideal workflow:
1. Get screenshots of the weapon statistics with PFDB_SS project
2. Turn images into text using Py_Exec and ImageParserForAPI
3. FileParse + StatisticProofread to extract data
4. ComponentTester (for now) brings everything together and will temporarily take the data, make the respective objects (using WeaponClasses), store the data in the database,
	read the database back and ensure it checks it against the temporary data.
5. C++ will handle the conversions and math with them, write it to the database, and try to do error-checking

Maybe I will move onto another format rather than databases, but that isn't necessary currently.

TO DO:
0. Modify Python script to better read the statistics and make sure everything is being read correctly (for examples: stuff is getting cut off)
	-> this has mostly been done, have figured out how to read damage ranges and values better using boundary identification
1. Finish all regex patterns by analyzing common mistakes/shortcomings

Common mistakes/shortcomings:
- clustered damages, like executioner have a tendency to be messed up
- low damage weapons clip with damage range markers (damage range markers are useless)
- 5.45x39mm usually becomes 9.45x39mm / 5 and 9 swap sometimes
- firemode firerates usually mess up by having letters, catch letters that are not following a number -> regex pattern should be able to do some magic here
- firemode types mess up burst: for example, "IIlll" instead of "IIIII"
-> identify general trends for damage / suppression

2. Edit FileIO to use SQL
3. Refactor FileParse
4. Edit PythonExecutionFactory to create objects easily, but also allow for manual objects to be loaded


Optional:

1. Edit PythonExecutionFactory to track Benchmark times, plus actual time
	-> time saved with parallelization?
2. Edit FileParse to accept strings directly
	-> IOutput overload potentially?



Useful websites:

general:
https://stackoverflow.com/questions/31417688/passing-a-vector-array-from-unmanaged-c-to-c-sharp (pinvoke)
https://www.programiz.com/csharp-programming/regex (regex stuff)
https://www.desmos.com/calculator/o7l7lxuumq (c++ calculator)
https://math.mit.edu/~stevenj/18.335/newton-sqrt.pdf (c++ calculator)
https://paste.sh/vVjE9yf_#_96XtnTdkzqtoDJ9ZukrGAxh (database things)
https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection (DI)
https://www.youtube.com/watch?v=GAOCe-2nXqc (DI, logging)
https://www.youtube.com/watch?v=xrGco4O1bfk&themeRefresh=1&theme=dark (pinvoke)

c++ sqlite
https://stackoverflow.com/questions/3957343/how-to-read-data-from-sqlite-database
https://www.sqlite.org/cintro.html
https://www.sqlite.org/rescode.html#ok
https://www.sqlite.org/c3ref/open.html
https://www.sqlite.org/c3ref/free_table.html
https://www.sqlite.org/c3ref/exec.html
https://www.tutorialspoint.com/sqlite/sqlite_c_cpp.htm

taken from ComponentTester.csproj file:

C:\Users\Aethelhelm\AppData\Local\Programs\Python\Python312\python -m PyInstaller -path=[C:\Users\Aethelhelm\AppData\Local\Programs\Python\Python312\Scripts] --workpath $(SolutionDir)ImageParserForAPI\build --distpath $(SolutionDir)ImageParserForAPI\dist --onefile $(SolutionDir)ImageParserForAPI\impa.py
